#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç–∞
"""

import pytz
from datetime import datetime, timedelta
from typing import List, Dict
import re

class TimeUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º"""
    
    @staticmethod
    def format_time(timestamp: str, timezone: pytz.timezone) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
        try:
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            local_dt = dt.astimezone(timezone)
            return local_dt.strftime('%H:%M:%S')
        except:
            return "N/A"
    
    @staticmethod
    def format_date(timestamp: datetime, timezone: pytz.timezone) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
        try:
            if isinstance(timestamp, str):
                timestamp = datetime.fromisoformat(timestamp)
            local_dt = timestamp.astimezone(timezone)
            return local_dt.strftime('%d.%m.%Y')
        except:
            return "N/A"
    
    @staticmethod
    def time_ago(timestamp: datetime, timezone: pytz.timezone) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å –º–æ–º–µ–Ω—Ç–∞"""
        try:
            now = datetime.now(timezone)
            if isinstance(timestamp, str):
                timestamp = datetime.fromisoformat(timestamp)
            
            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –æ–¥–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
            if timestamp.tzinfo is None:
                timestamp = timezone.localize(timestamp)
            else:
                timestamp = timestamp.astimezone(timezone)
            
            diff = now - timestamp
            
            if diff.seconds < 60:
                return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
            elif diff.seconds < 3600:
                minutes = diff.seconds // 60
                return f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
            elif diff.days == 0:
                hours = diff.seconds // 3600
                return f"{hours} —á –Ω–∞–∑–∞–¥"
            else:
                return f"{diff.days} –¥–Ω –Ω–∞–∑–∞–¥"
        except:
            return "N/A"

class MessageFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram"""
    
    @staticmethod
    def format_enhanced_funding_opportunities(opportunities: List, user_deposit: float, 
                                           timezone: pytz.timezone) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        if not opportunities:
            return "‚ùå –í—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        current_time = datetime.now(timezone).strftime('%H:%M')
        
        message = f"üî• **–í–´–°–û–ö–û–î–û–•–û–î–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò** üî•\n"
        message += f"üïí –í—Ä–µ–º—è (–ö–∏–µ–≤): **{current_time}**\n\n"
        
        for i, opp in enumerate(opportunities[:10], 1):
            side_emoji = "üìà" if opp.side == 'LONG' else "üìâ"
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
            profit_data = ProfitCalculator.calculate_profit(opp.funding_rate, user_deposit)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if opp.apr >= 500:
                level_emoji = "üî•üî•üî•"
                level_text = "–≠–ö–°–¢–†–ò–ú"
            elif opp.apr >= 200:
                level_emoji = "üî•üî•"
                level_text = "–í–´–°–û–ö–ò–ô"
            elif opp.apr >= 100:
                level_emoji = "üî•"
                level_text = "–•–û–†–û–®–ò–ô"
            else:
                level_emoji = "‚≠ê"
                level_text = "–°–†–ï–î–ù–ò–ô"
            
            message += f"{i}. {side_emoji} **{opp.symbol}** {level_emoji}\n"
            message += f"   üí∞ APR: **{opp.apr}%** ({level_text})\n"
            message += f"   ‚è∞ –§–∞–Ω–¥–∏–Ω–≥: **{opp.funding_rate}%** –∫–∞–∂–¥—ã–µ 8—á\n"
            message += f"   üèõÔ∏è –ë–∏—Ä–∂–∞: {opp.exchange}\n"
            
            if profit_data:
                message += f"   üíµ –î–æ—Ö–æ–¥/–¥–µ–Ω—å: **${profit_data['daily_profit']}**\n"
                message += f"   üìä –î–æ—Ö–æ–¥/–º–µ—Å—è—Ü: **${profit_data['monthly_profit']}**\n"
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            time_info = TimeUtils.time_ago(opp.timestamp, timezone)
            message += f"   üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {time_info}\n"
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            if opp.side == 'LONG':
                message += f"   ‚úÖ **–î–ï–ô–°–¢–í–ò–ï: –õ–û–ù–ì** (—à–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç –ª–æ–Ω–≥–∞–º)\n"
            else:
                message += f"   ‚úÖ **–î–ï–ô–°–¢–í–ò–ï: –®–û–†–¢** (–ª–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç —à–æ—Ä—Ç–∞–º)\n"
            
            message += "\n"
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        total_daily_profit = sum(
            ProfitCalculator.calculate_profit(opp.funding_rate, user_deposit).get('daily_profit', 0)
            for opp in opportunities[:5]
        )
        
        message += f"üí≥ –î–µ–ø–æ–∑–∏—Ç: **${user_deposit:,.0f}**\n"
        message += f"üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ç–æ–ø-5: **${total_daily_profit:.0f}/–¥–µ–Ω—å**\n"
        message += f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: **{len(opportunities)}**\n"
        message += f"‚ö° –í–∫–ª—é—á–∞—è —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã–µ"
        
        return message
    
    @staticmethod
    def format_alert_message(updates: List, timezone: pytz.timezone) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not updates:
            return ""
        
        current_time = datetime.now(timezone).strftime('%H:%M')
        
        message = f"üö® **–ê–õ–ï–†–¢: –í–´–°–û–ö–ò–ô APR** üö®\n"
        message += f"üïí {current_time} (–ö–∏–µ–≤)\n\n"
        
        for update in updates:
            side_emoji = "üìà" if update.side == 'LONG' else "üìâ"
            
            message += f"{side_emoji} **{update.symbol}** ({update.exchange})\n"
            message += f"üí∞ APR: **{update.apr}%**\n"
            message += f"‚è∞ –§–∞–Ω–¥–∏–Ω–≥: **{update.funding_rate}%**\n"
            
            if update.side == 'LONG':
                message += f"‚úÖ **–õ–û–ù–ì–û–í–ê–¢–¨** (—à–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç)\n"
            else:
                message += f"‚úÖ **–®–û–†–¢–ò–¢–¨** (–ª–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç)\n"
            
            message += "\n"
        
        message += f"‚ö° –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        message += f"üîç –î–µ—Ç–∞–ª–∏: /scan –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        
        return message

class ProfitCalculator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏"""
    
    @staticmethod
    def calculate_profit(funding_rate: float, deposit: float, cycles: int = 3) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        try:
            if deposit <= 0 or abs(funding_rate) > 50:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            # –ö–æ–º–∏—Å—Å–∏–∏ (—Å–ø–æ—Ç + —Ñ—å—é—á–µ—Ä—Å)
            spot_commission = 0.001  # 0.1%
            futures_commission = 0.0003  # 0.03%
            total_commission_rate = spot_commission + futures_commission
            
            # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            gross_profit_per_cycle = deposit * (abs(funding_rate) / 100)
            commission_per_cycle = deposit * total_commission_rate
            net_profit_per_cycle = gross_profit_per_cycle - commission_per_cycle
            
            # –î–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            daily_gross_profit = gross_profit_per_cycle * cycles
            daily_commission = commission_per_cycle * cycles
            daily_net_profit = net_profit_per_cycle * cycles
            
            # –ú–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã (90 —Ü–∏–∫–ª–æ–≤)
            monthly_cycles = 90
            monthly_gross_profit = gross_profit_per_cycle * monthly_cycles
            monthly_commission = commission_per_cycle * monthly_cycles
            monthly_net_profit = net_profit_per_cycle * monthly_cycles
            
            # –ì–æ–¥–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            yearly_cycles = cycles * 365
            apr = abs(funding_rate) * yearly_cycles
            
            # ROI –º–µ—Ç—Ä–∏–∫–∏
            daily_roi = (daily_net_profit / deposit) * 100
            monthly_roi = (monthly_net_profit / deposit) * 100
            
            # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
            max_drawdown_estimate = deposit * 0.02  # 2% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            risk_adjusted_return = monthly_net_profit - max_drawdown_estimate
            
            # –í—Ä–µ–º—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
            if daily_net_profit > 0:
                payback_days = deposit / daily_net_profit
            else:
                payback_days = float('inf')
            
            return {
                # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                'profit_per_cycle': round(net_profit_per_cycle, 2),
                'gross_profit_per_cycle': round(gross_profit_per_cycle, 2),
                'commission_per_cycle': round(commission_per_cycle, 2),
                
                # –î–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                'daily_profit': round(daily_net_profit, 2),
                'daily_gross_profit': round(daily_gross_profit, 2),
                'daily_commission': round(daily_commission, 2),
                'daily_roi': round(daily_roi, 2),
                
                # –ú–µ—Å—è—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                'monthly_profit': round(monthly_net_profit, 2),
                'monthly_gross_profit': round(monthly_gross_profit, 2),
                'monthly_commission': round(monthly_commission, 2),
                'monthly_roi': round(monthly_roi, 2),
                
                # –ì–æ–¥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                'apr': round(apr, 2),
                
                # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
                'max_drawdown_estimate': round(max_drawdown_estimate, 2),
                'risk_adjusted_return': round(risk_adjusted_return, 2),
                'payback_days': round(payback_days, 1) if payback_days != float('inf') else 999,
                
                # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                'profit_margin': round((net_profit_per_cycle / gross_profit_per_cycle) * 100, 1),
                'cycles_per_month': monthly_cycles,
                'commission_percentage': round((commission_per_cycle / gross_profit_per_cycle) * 100, 1)
            }
        
        except Exception as e:
            return {}
    
    @staticmethod
    def calculate_compound_profit(funding_rate: float, initial_deposit: float, 
                                days: int, reinvest_percentage: float = 1.0) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ —Å —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            daily_rate = abs(funding_rate) * 3 / 100  # 3 —Ü–∏–∫–ª–∞ –≤ –¥–µ–Ω—å
            commission_rate = 0.0013  # 0.13% –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Ü–∏–∫–ª
            net_daily_rate = daily_rate - (commission_rate * 3)
            
            # –†–∞—Å—á–µ—Ç —Å —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            current_balance = initial_deposit
            daily_profits = []
            
            for day in range(days):
                daily_profit = current_balance * net_daily_rate
                reinvest_amount = daily_profit * reinvest_percentage
                
                current_balance += reinvest_amount
                daily_profits.append(daily_profit)
            
            total_profit = current_balance - initial_deposit
            
            return {
                'final_balance': round(current_balance, 2),
                'total_profit': round(total_profit, 2),
                'total_return_percentage': round((total_profit / initial_deposit) * 100, 2),
                'average_daily_profit': round(sum(daily_profits) / len(daily_profits), 2),
                'compound_factor': round(current_balance / initial_deposit, 2)
            }
        
        except Exception as e:
            return {}

class ValidationUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_deposit(deposit: str) -> tuple[bool, float, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_deposit = re.sub(r'[^\d.]', '', deposit)
            
            if not clean_deposit:
                return False, 0, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            
            amount = float(clean_deposit)
            
            if amount < 100:
                return False, 0, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: $100"
            elif amount > 10_000_000:
                return False, 0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: $10,000,000"
            else:
                return True, amount, "OK"
                
        except ValueError:
            return False, 0, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
    
    @staticmethod
    def validate_funding_rate(rate: str) -> tuple[bool, float, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç–∞"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            clean_rate = re.sub(r'[^\d.+-]', '', rate)
            
            if not clean_rate:
                return False, 0, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            
            funding_rate = float(clean_rate)
            
            if abs(funding_rate) > 10:
                return False, 0, "–§–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ ¬±10%"
            else:
                return True, funding_rate, "OK"
                
        except ValueError:
            return False, 0, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
    
    @staticmethod
    def validate_symbol(symbol: str) -> tuple[bool, str, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            clean_symbol = re.sub(r'[^A-Za-z]', '', symbol).upper()
            
            if len(clean_symbol) < 2:
                return False, "", "–°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã"
            elif len(clean_symbol) > 10:
                return False, "", "–°–∏–º–≤–æ–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 10 –±—É–∫–≤"
            else:
                return True, clean_symbol, "OK"
                
        except Exception:
            return False, "", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª"

class FormatUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    def format_number(number: float, decimals: int = 2) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
        try:
            return f"{number:,.{decimals}f}"
        except:
            return str(number)
    
    @staticmethod
    def format_percentage(percentage: float, decimals: int = 2) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
        try:
            return f"{percentage:.{decimals}f}%"
        except:
            return f"{percentage}%"
    
    @staticmethod
    def format_currency(amount: float, currency: str = "USD") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        try:
            if currency == "USD":
                return f"${amount:,.2f}"
            else:
                return f"{amount:,.2f} {currency}"
        except:
            return f"{amount} {currency}"
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 100) -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"""
        if len(text) <= max_length:
            return text
        else:
            return text[:max_length-3] + "..."
