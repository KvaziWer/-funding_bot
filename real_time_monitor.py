#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç–æ–≤ —á–µ—Ä–µ–∑ WebSocket
"""

import asyncio
import websockets
import json
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
import pytz
from dataclasses import dataclass
import aiohttp
from concurrent.futures import ThreadPoolExecutor
import queue
import threading

from config import bot_config, websocket_config, parsing_config, TOP_50_COINS

logger = logging.getLogger(__name__)

@dataclass
class FundingUpdate:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç–∞"""
    symbol: str
    funding_rate: float
    apr: float
    exchange: str
    timestamp: datetime
    change_percent: float = 0.0
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç APR"""
        if not self.symbol or len(self.symbol) < 2:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª")
        
        if abs(self.funding_rate) > 50:
            raise ValueError("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç APR –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
        if self.apr == 0:
            self.apr = abs(self.funding_rate) * 3 * 365

class RealTimeMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç–æ–≤"""
    
    def __init__(self, update_callback: Optional[Callable] = None):
        self.update_callback = update_callback
        self.connections: Dict[str, websockets.WebSocketServerProtocol] = {}
        self.is_running = False
        self.last_funding_data: Dict[str, FundingUpdate] = {}
        self.update_queue = queue.Queue()
        self.executor = ThreadPoolExecutor(max_workers=3)
        
        # –ö–∏–µ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        self.kiev_tz = pytz.timezone('Europe/Kiev')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_updates': 0,
            'alerts_sent': 0,
            'connections_lost': 0,
            'last_update': None
        }
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç–æ–≤")
        self.is_running = True
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        tasks = []
        
        for exchange, endpoint in parsing_config.websocket_sources.items():
            task = asyncio.create_task(
                self.monitor_exchange(exchange, endpoint),
                name=f"monitor_{exchange}"
            )
            tasks.append(task)
        
        # –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        processing_task = asyncio.create_task(
            self.process_updates(),
            name="process_updates"
        )
        tasks.append(processing_task)
        
        # –ó–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        cleanup_task = asyncio.create_task(
            self.periodic_cleanup(),
            name="periodic_cleanup"
        )
        tasks.append(cleanup_task)
        
        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        finally:
            await self.stop_monitoring()
    
    async def monitor_exchange(self, exchange: str, endpoint: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏"""
        logger.info(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange}: {endpoint}")
        
        reconnect_count = 0
        max_reconnects = websocket_config.max_reconnects
        
        while self.is_running and reconnect_count < max_reconnects:
            try:
                async with websockets.connect(
                    endpoint,
                    ping_interval=websocket_config.ping_interval,
                    ping_timeout=websocket_config.ping_timeout,
                    close_timeout=websocket_config.close_timeout,
                    max_size=websocket_config.max_size
                ) as websocket:
                    
                    self.connections[exchange] = websocket
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {exchange}")
                    
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç—ã
                    await self.subscribe_funding_rates(websocket, exchange)
                    
                    reconnect_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    
                    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    async for message in websocket:
                        try:
                            await self.process_websocket_message(message, exchange)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {exchange}: {e}")
                            
            except websockets.exceptions.ConnectionClosed:
                logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {exchange} –∑–∞–∫—Ä—ã—Ç–æ")
                reconnect_count += 1
                self.stats['connections_lost'] += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange}: {e}")
                reconnect_count += 1
            
            if self.is_running and reconnect_count < max_reconnects:
                logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange} —á–µ—Ä–µ–∑ {websocket_config.reconnect_interval}—Å...")
                await asyncio.sleep(websocket_config.reconnect_interval)
        
        if reconnect_count >= max_reconnects:
            logger.error(f"üíÄ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.connections.pop(exchange, None)
    
    async def subscribe_funding_rates(self, websocket, exchange: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç—ã –±–∏—Ä–∂–∏"""
        try:
            if exchange == 'binance':
                # Binance: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã
                subscribe_msg = {
                    "method": "SUBSCRIBE",
                    "params": ["!ticker@arr"],
                    "id": 1
                }
                
            elif exchange == 'bybit':
                # Bybit: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç—ã
                subscribe_msg = {
                    "op": "subscribe",
                    "args": ["tickers.linear"]
                }
                
            elif exchange == 'okx':
                # OKX: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç—ã
                subscribe_msg = {
                    "op": "subscribe",
                    "args": [{"channel": "funding-rate", "instType": "SWAP"}]
                }
                
            elif exchange == 'gateio':
                # Gate.io: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç—ã
                subscribe_msg = {
                    "method": "futures.funding_rate",
                    "params": [],
                    "id": 1
                }
                
            elif exchange == 'bitget':
                # Bitget: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç—ã
                subscribe_msg = {
                    "op": "subscribe",
                    "args": [{"instType": "mc", "channel": "funding-rate", "instId": "default"}]
                }
            
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {exchange}")
                return
            
            await websocket.send(json.dumps(subscribe_msg))
            logger.info(f"üìã –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç—ã {exchange} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {exchange}: {e}")
    
    async def process_websocket_message(self, message: str, exchange: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            data = json.loads(message)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥-–¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏
            funding_updates = []
            
            if exchange == 'binance':
                funding_updates = self.parse_binance_data(data)
            elif exchange == 'bybit':
                funding_updates = self.parse_bybit_data(data)
            elif exchange == 'okx':
                funding_updates = self.parse_okx_data(data)
            elif exchange == 'gateio':
                funding_updates = self.parse_gateio_data(data)
            elif exchange == 'bitget':
                funding_updates = self.parse_bitget_data(data)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å
            for update in funding_updates:
                if self.should_process_update(update):
                    self.update_queue.put(update)
                    self.stats['total_updates'] += 1
            
        except json.JSONDecodeError:
            logger.debug(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç {exchange}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {exchange}: {e}")
    
    def parse_binance_data(self, data: dict) -> List[FundingUpdate]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö Binance"""
        updates = []
        
        try:
            # Binance –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–∏–∫–µ—Ä–æ–≤
            if isinstance(data, list):
                for ticker in data:
                    symbol = ticker.get('s', '').replace('USDT', '').replace('USD', '')
                    
                    if symbol in TOP_50_COINS:
                        continue
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                    funding_rate = float(ticker.get('r', 0))  # 'r' - funding rate
                    
                    if funding_rate != 0:
                        update = FundingUpdate(
                            symbol=symbol,
                            funding_rate=funding_rate * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                            apr=0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                            exchange='Binance',
                            timestamp=datetime.now(self.kiev_tz)
                        )
                        updates.append(update)
                        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Binance –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return updates
    
    def parse_bybit_data(self, data: dict) -> List[FundingUpdate]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö Bybit"""
        updates = []
        
        try:
            # Bybit: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if 'data' in data and isinstance(data['data'], list):
                for item in data['data']:
                    symbol = item.get('symbol', '').replace('USDT', '').replace('USD', '')
                    
                    if symbol in TOP_50_COINS:
                        continue
                    
                    funding_rate = float(item.get('fundingRate', 0))
                    
                    if funding_rate != 0:
                        update = FundingUpdate(
                            symbol=symbol,
                            funding_rate=funding_rate * 100,
                            apr=0,
                            exchange='Bybit',
                            timestamp=datetime.now(self.kiev_tz)
                        )
                        updates.append(update)
                        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Bybit –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return updates
    
    def parse_okx_data(self, data: dict) -> List[FundingUpdate]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö OKX"""
        updates = []
        
        try:
            if 'data' in data and isinstance(data['data'], list):
                for item in data['data']:
                    symbol = item.get('instId', '').replace('-USDT-SWAP', '').replace('-USD-SWAP', '')
                    
                    if symbol in TOP_50_COINS:
                        continue
                    
                    funding_rate = float(item.get('fundingRate', 0))
                    
                    if funding_rate != 0:
                        update = FundingUpdate(
                            symbol=symbol,
                            funding_rate=funding_rate * 100,
                            apr=0,
                            exchange='OKX',
                            timestamp=datetime.now(self.kiev_tz)
                        )
                        updates.append(update)
                        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ OKX –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return updates
    
    def parse_gateio_data(self, data: dict) -> List[FundingUpdate]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö Gate.io"""
        updates = []
        
        try:
            if 'result' in data and isinstance(data['result'], list):
                for item in data['result']:
                    symbol = item.get('contract', '').replace('_USDT', '').replace('_USD', '')
                    
                    if symbol in TOP_50_COINS:
                        continue
                    
                    funding_rate = float(item.get('funding_rate', 0))
                    
                    if funding_rate != 0:
                        update = FundingUpdate(
                            symbol=symbol,
                            funding_rate=funding_rate * 100,
                            apr=0,
                            exchange='Gate.io',
                            timestamp=datetime.now(self.kiev_tz)
                        )
                        updates.append(update)
                        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Gate.io –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return updates
    
    def parse_bitget_data(self, data: dict) -> List[FundingUpdate]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö Bitget"""
        updates = []
        
        try:
            if 'data' in data and isinstance(data['data'], list):
                for item in data['data']:
                    symbol = item.get('instId', '').replace('USDT', '').replace('USD', '')
                    
                    if symbol in TOP_50_COINS:
                        continue
                    
                    funding_rate = float(item.get('fundingRate', 0))
                    
                    if funding_rate != 0:
                        update = FundingUpdate(
                            symbol=symbol,
                            funding_rate=funding_rate * 100,
                            apr=0,
                            exchange='Bitget',
                            timestamp=datetime.now(self.kiev_tz)
                        )
                        updates.append(update)
                        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Bitget –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return updates
    
    def should_process_update(self, update: FundingUpdate) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ APR –ø–æ—Ä–æ–≥–∞
            if update.apr < bot_config.min_apr_threshold:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            key = f"{update.symbol}_{update.exchange}"
            
            if key in self.last_funding_data:
                last_update = self.last_funding_data[key]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É)
                time_diff = update.timestamp - last_update.timestamp
                if time_diff.total_seconds() < 60:
                    return False
                
                # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
                change = abs(update.funding_rate - last_update.funding_rate)
                change_percent = (change / abs(last_update.funding_rate)) * 100 if last_update.funding_rate != 0 else 0
                update.change_percent = change_percent
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (>10%)
                if change_percent < 10:
                    return False
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.last_funding_data[key] = update
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def process_updates(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        logger.info("üìã –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                updates_batch = []
                
                # –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 10 –∑–∞ —Ä–∞–∑)
                for _ in range(10):
                    try:
                        update = self.update_queue.get_nowait()
                        updates_batch.append(update)
                    except queue.Empty:
                        break
                
                if updates_batch:
                    await self.process_funding_updates(updates_batch)
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(5)
    
    async def process_funding_updates(self, updates: List[FundingUpdate]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–Ω–¥–∏–Ω–≥–∞"""
        try:
            high_apr_updates = []
            
            for update in updates:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                if update.apr >= bot_config.alert_apr_threshold:
                    high_apr_updates.append(update)
                    logger.info(f"üî• –í—ã—Å–æ–∫–∏–π APR: {update.symbol} - {update.apr}% ({update.exchange})")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å callback
            if high_apr_updates and self.update_callback:
                await self.send_alerts(high_apr_updates)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats['last_update'] = datetime.now(self.kiev_tz)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {e}")
    
    async def send_alerts(self, updates: List[FundingUpdate]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –æ –≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"""
        try:
            if self.update_callback:
                await self.update_callback(updates)
                self.stats['alerts_sent'] += len(updates)
                logger.info(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(updates)} –∞–ª–µ—Ä—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    async def periodic_cleanup(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏")
        
        while self.is_running:
            try:
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
                cutoff_time = datetime.now(self.kiev_tz) - timedelta(hours=1)
                
                keys_to_remove = []
                for key, update in self.last_funding_data.items():
                    if update.timestamp < cutoff_time:
                        keys_to_remove.append(key)
                
                for key in keys_to_remove:
                    del self.last_funding_data[key]
                
                if keys_to_remove:
                    logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {len(keys_to_remove)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
                await asyncio.sleep(1800)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        self.is_running = False
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        for exchange, websocket in self.connections.items():
            try:
                await websocket.close()
                logger.info(f"üîå –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {exchange}: {e}")
        
        self.connections.clear()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ executor
        self.executor.shutdown(wait=True)
        
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            **self.stats,
            'active_connections': len(self.connections),
            'queue_size': self.update_queue.qsize(),
            'tracked_symbols': len(self.last_funding_data),
            'uptime': datetime.now(self.kiev_tz).isoformat()
        }

# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
def create_real_time_monitor(update_callback: Optional[Callable] = None) -> RealTimeMonitor:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    return RealTimeMonitor(update_callback)
