#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–Ω–¥–∏–Ω–≥-—Ä–µ–π—Ç–æ–≤ v3.0
–° —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏–µ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import logging
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pytz
import json
import schedule

import telebot
from telebot import types
from concurrent.futures import ThreadPoolExecutor

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import bot_config, websocket_config, parsing_config, TOP_50_COINS
from database import db_manager, UserProfile
from real_time_monitor import create_real_time_monitor, FundingUpdate
from data_collector import EnhancedDataCollector
from utils import MessageFormatter, ProfitCalculator, TimeUtils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('funding_bot_v3.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class EnhancedFundingBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç —Å —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token, parse_mode='Markdown')
        self.db = db_manager
        self.data_collector = EnhancedDataCollector()
        self.executor = ThreadPoolExecutor(max_workers=5)
        self.kiev_tz = pytz.timezone('Europe/Kiev')
        
        # –†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.rt_monitor = None
        self.rt_monitor_task = None
        self.monitoring_active = False
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        self.scheduler_thread = None
        self.scheduler_active = False
        
        # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        self.last_opportunities = []
        self.last_update_time = None
        
        self.setup_handlers()
        self.setup_scheduler()
        logger.info("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.bot.message_handler(commands=['start'])
        def start_command(message):
            try:
                user_id = message.from_user.id
                user_name = message.from_user.first_name or ""
                
                # –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.db.create_or_update_user(user_id)
                self.db.update_user_activity(user_id)
                
                self.send_main_menu(message.chat.id, user_name)
                
                logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({user_name})")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start: {e}")
                self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        @self.bot.message_handler(commands=['stats'])
        def stats_command(message):
            try:
                self.handle_user_statistics(message.chat.id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã stats: {e}")
        
        @self.bot.message_handler(commands=['alerts'])
        def alerts_command(message):
            try:
                self.handle_user_alerts(message.chat.id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã alerts: {e}")
        
        @self.bot.message_handler(commands=['monitor'])
        def monitor_command(message):
            try:
                if message.from_user.id == bot_config.admin_chat_id:
                    self.handle_monitor_control(message.chat.id)
                else:
                    self.bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã monitor: {e}")
        
        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_handler(call):
            try:
                user_id = call.from_user.id
                self.db.update_user_activity(user_id)
                self.handle_callback(call)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ callback: {e}")
                self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        
        @self.bot.message_handler(content_types=['text'])
        def text_handler(message):
            try:
                user_id = message.from_user.id
                self.db.update_user_activity(user_id)
                self.handle_text_message(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
                self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        @self.bot.message_handler(content_types=['location'])
        def location_handler(message):
            try:
                self.handle_location(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
    
    def send_main_menu(self, chat_id: int, user_name: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ö–∏–µ–≤–µ
            kiev_time = datetime.now(self.kiev_tz).strftime('%H:%M')
            
            text = f"üî• **–§–ê–ù–î–ò–ù–ì –°–ö–ê–ù–ï–† v3.0** üî•\n\n"
            text += f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n" if user_name else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
            
            text += f"üïí –í–∞—à–µ –≤—Ä–µ–º—è (–ö–∏–µ–≤): **{kiev_time}**\n\n"
            
            text += "üéØ **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v3.0:**\n"
            text += "‚ö° –†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ WebSocket\n"
            text += "üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ APR >100%\n"
            text += "üìä –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n"
            text += "üá∫üá¶ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏–µ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
            text += "üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            
            # –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.monitoring_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            text += f"üì° –†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_status}\n\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if self.last_opportunities:
                best_apr = max(opp.apr for opp in self.last_opportunities[:3])
                text += f"üî• –õ—É—á—à–∏–π —Ç–µ–∫—É—â–∏–π APR: **{best_apr}%**\n\n"
            
            text += "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            scan_btn = types.InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="scan_funding")
            realtime_btn = types.InlineKeyboardButton("‚ö° –†–µ–∞–ª-—Ç–∞–π–º", callback_data="realtime_data")
            
            calc_btn = types.InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="profit_calculator")
            alerts_btn = types.InlineKeyboardButton("üîî –ê–ª–µ—Ä—Ç—ã", callback_data="user_alerts")
            
            stats_btn = types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")
            settings_btn = types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            
            help_btn = types.InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help")
            
            markup.add(scan_btn, realtime_btn)
            markup.add(calc_btn, alerts_btn)
            markup.add(stats_btn, settings_btn)
            markup.add(help_btn)
            
            self.bot.send_message(chat_id, text, reply_markup=markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    def handle_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            chat_id = call.message.chat.id
            data = call.data
            
            # –†–æ—É—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥
            if data == "scan_funding":
                self.handle_scan_funding(chat_id)
            elif data == "realtime_data":
                self.handle_realtime_data(chat_id)
            elif data == "profit_calculator":
                self.handle_profit_calculator(chat_id)
            elif data == "user_alerts":
                self.handle_user_alerts(chat_id)
            elif data == "user_stats":
                self.handle_user_statistics(chat_id)
            elif data == "settings":
                self.handle_settings(chat_id)
            elif data == "help":
                self.handle_help(chat_id)
            elif data == "back_to_menu":
                user_name = call.from_user.first_name or ""
                self.send_main_menu(chat_id, user_name)
            elif data.startswith("set_deposit_"):
                amount = int(data.split("_")[2])
                self.set_user_deposit(chat_id, amount)
            elif data.startswith("quick_calc_"):
                parts = data.split("_")
                deposit = float(parts[2])
                funding_rate = float(parts[3])
                self.send_quick_calculation(chat_id, deposit, funding_rate)
            elif data.startswith("alert_"):
                alert_id = int(data.split("_")[1])
                self.mark_alert_read(chat_id, alert_id)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def handle_realtime_data(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.monitoring_active:
                text = "üì° **–†–ï–ê–õ-–¢–ê–ô–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì** üì°\n\n"
                text += "‚ö†Ô∏è –†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n\n"
                text += "üîß –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞\n"
                text += "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
                
                markup = types.InlineKeyboardMarkup()
                menu_btn = types.InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="back_to_menu")
                markup.add(menu_btn)
                
                self.bot.send_message(chat_id, text, reply_markup=markup)
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_stats = self.rt_monitor.get_stats() if self.rt_monitor else {}
            
            text = f"üì° **–†–ï–ê–õ-–¢–ê–ô–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì** üì°\n\n"
            text += f"üü¢ **–°—Ç–∞—Ç—É—Å**: –ê–∫—Ç–∏–≤–µ–Ω\n"
            text += f"üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**: {monitor_stats.get('active_connections', 0)}\n"
            text += f"üìà **–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ**: {monitor_stats.get('total_updates', 0)}\n"
            text += f"üîî **–ê–ª–µ—Ä—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ**: {monitor_stats.get('alerts_sent', 0)}\n"
            text += f"üíæ **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–≤**: {monitor_stats.get('tracked_symbols', 0)}\n\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã—Ö
            if self.last_opportunities:
                text += f"üî• **–ü–û–°–õ–ï–î–ù–ò–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**\n\n"
                
                for i, opp in enumerate(self.last_opportunities[:5], 1):
                    side_emoji = "üìà" if opp.side == 'LONG' else "üìâ"
                    time_ago = TimeUtils.time_ago(opp.timestamp, self.kiev_tz)
                    
                    text += f"{i}. {side_emoji} **{opp.symbol}** ({opp.exchange})\n"
                    text += f"   üí∞ APR: **{opp.apr}%**\n"
                    text += f"   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {time_ago}\n\n"
            else:
                text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            text += f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now(self.kiev_tz).strftime('%H:%M:%S')}"
            
            markup = types.InlineKeyboardMarkup()
            refresh_btn = types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="realtime_data")
            alerts_btn = types.InlineKeyboardButton("üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="user_alerts")
            menu_btn = types.InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="back_to_menu")
            
            markup.add(refresh_btn, alerts_btn)
            markup.add(menu_btn)
            
            self.bot.send_message(chat_id, text, reply_markup=markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã—Ö")
    
    def handle_scan_funding(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = self.db.get_user_profile(chat_id)
            user_deposit = profile.deposit if profile else 1000
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_msg = self.bot.send_message(
                chat_id,
                "üîç **–°–∫–∞–Ω–∏—Ä—É—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...**\n\n"
                "‚è≥ CoinGlass, Binance, Bybit, OKX, Gate.io\n"
                "üîÑ –§–∏–ª—å—Ç—Ä—É—é –∞–ª—å—Ç–∫–æ–∏–Ω—ã –≤–Ω–µ —Ç–æ–ø-50\n"
                "üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø—Ä–∏–±—ã–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞\n"
                "üí° –ü—Ä–∏–º–µ–Ω—è—é —Ä–µ–∞–ª-—Ç–∞–π–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"
            )
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            future = self.executor.submit(
                self.enhanced_scan_wrapper, 
                chat_id, 
                loading_msg.message_id, 
                user_deposit
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def enhanced_scan_wrapper(self, chat_id: int, loading_msg_id: int, user_deposit: float):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                opportunities = loop.run_until_complete(
                    self.data_collector.collect_enhanced_funding_data()
                )
                
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã–º–∏
                if self.last_opportunities:
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                    rt_symbols = {opp.symbol for opp in self.last_opportunities}
                    
                    for rt_opp in self.last_opportunities:
                        # –ó–∞–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å–≤–µ–∂–µ–µ
                        found = False
                        for i, opp in enumerate(opportunities):
                            if opp.symbol == rt_opp.symbol and opp.exchange == rt_opp.exchange:
                                if rt_opp.timestamp > opp.timestamp:
                                    opportunities[i] = rt_opp
                                found = True
                                break
                        
                        if not found and rt_opp.apr >= bot_config.min_apr_threshold:
                            opportunities.append(rt_opp)
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ APR
                opportunities.sort(key=lambda x: x.apr, reverse=True)
                opportunities = opportunities[:bot_config.max_opportunities_display]
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                if opportunities:
                    self.db.save_funding_updates(opportunities)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.db.update_user_stats(chat_id, total_scans=1)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = MessageFormatter.format_enhanced_funding_opportunities(
                    opportunities, user_deposit, self.kiev_tz
                )
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                markup = types.InlineKeyboardMarkup()
                
                refresh_btn = types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="scan_funding")
                realtime_btn = types.InlineKeyboardButton("‚ö° –†–µ–∞–ª-—Ç–∞–π–º", callback_data="realtime_data")
                calc_btn = types.InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="profit_calculator")
                
                markup.add(refresh_btn, realtime_btn)
                markup.add(calc_btn)
                
                # –ë—ã—Å—Ç—Ä—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è —Ç–æ–ø-3 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                if opportunities[:3]:
                    markup.row()
                    for i, opp in enumerate(opportunities[:3]):
                        quick_btn = types.InlineKeyboardButton(
                            f"üìä {opp.symbol}",
                            callback_data=f"quick_calc_{user_deposit}_{opp.funding_rate}"
                        )
                        markup.insert(quick_btn)
                
                menu_btn = types.InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="back_to_menu")
                markup.add(menu_btn)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.bot.delete_message(chat_id, loading_msg_id)
                self.bot.send_message(chat_id, message, reply_markup=markup)
                
                logger.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {len(opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
                
            finally:
                loop.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            try:
                self.bot.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                    chat_id, loading_msg_id
                )
            except:
                pass
    
    def handle_user_alerts(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            alerts = self.db.get_user_alerts(chat_id, limit=10)
            unread_alerts = self.db.get_user_alerts(chat_id, unread_only=True)
            
            text = f"üîî **–ú–û–ò –ê–õ–ï–†–¢–´** üîî\n\n"
            
            if unread_alerts:
                text += f"üÜï **–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö**: {len(unread_alerts)}\n\n"
                
                for alert in unread_alerts[:5]:
                    alert_time = TimeUtils.format_time(alert['sent_at'], self.kiev_tz)
                    side_emoji = "üìà" if alert['funding_rate'] < 0 else "üìâ"
                    
                    text += f"{side_emoji} **{alert['symbol']}** ({alert['exchange']})\n"
                    text += f"   üí∞ APR: **{alert['apr']}%**\n"
                    text += f"   üïí {alert_time}\n\n"
            
            if alerts:
                text += f"üìã **–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤**: {len(alerts)}\n"
                text += f"üìÖ **–ü–µ—Ä–∏–æ–¥**: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n\n"
            else:
                text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤\n\n"
                text += "üí° –ê–ª–µ—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ APR >100%\n"
                text += "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥ –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            
            markup = types.InlineKeyboardMarkup()
            
            if unread_alerts:
                mark_read_btn = types.InlineKeyboardButton(
                    "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏", 
                    callback_data="mark_alerts_read"
                )
                markup.add(mark_read_btn)
            
            settings_btn = types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤", callback_data="alert_settings")
            realtime_btn = types.InlineKeyboardButton("‚ö° –†–µ–∞–ª-—Ç–∞–π–º", callback_data="realtime_data")
            menu_btn = types.InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="back_to_menu")
            
            markup.add(settings_btn, realtime_btn)
            markup.add(menu_btn)
            
            self.bot.send_message(chat_id, text, reply_markup=markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤")
    
    def handle_user_statistics(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = self.db.get_user_stats(chat_id)
            profile = self.db.get_user_profile(chat_id)
            
            text = f"üìä **–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê** üìä\n\n"
            
            if profile:
                registration_date = TimeUtils.format_date(profile.created_at, self.kiev_tz)
                text += f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å**:\n"
                text += f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_date}\n"
                text += f"   üí≥ –î–µ–ø–æ–∑–∏—Ç: ${profile.deposit:,.0f}\n"
                text += f"   üìä –ú–∏–Ω. APR: {profile.min_apr}%\n"
                text += f"   üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {profile.timezone}\n\n"
            
            text += f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**:\n"
            text += f"   üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: **{user_stats.get('total_scans', 0)}**\n"
            text += f"   üîî –ê–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: **{user_stats.get('alerts_received', 0)}**\n"
            text += f"   üèÜ –õ—É—á—à–∏–π APR: **{user_stats.get('best_apr_found', 0)}%**\n"
            text += f"   üí∞ –†–∞—Å—á–µ—Ç–æ–≤ –ø—Ä–∏–±—ã–ª–∏: **${user_stats.get('total_profit_calculated', 0):,.0f}**\n\n"
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            system_stats = self.db.get_system_stats()
            if system_stats:
                text += f"üåê **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:\n"
                text += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {system_stats.get('total_users', 0)}\n"
                text += f"   üìä –ó–∞–ø–∏—Å–µ–π —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {system_stats.get('total_funding_records', 0)}\n"
                text += f"   üìà –°—Ä–µ–¥–Ω–∏–π APR (24—á): {system_stats.get('avg_apr_24h', 0)}%\n"
                text += f"   üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π APR (24—á): {system_stats.get('max_apr_24h', 0)}%\n"
            
            markup = types.InlineKeyboardMarkup()
            
            scan_btn = types.InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="scan_funding")
            calc_btn = types.InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="profit_calculator")
            settings_btn = types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            menu_btn = types.InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="back_to_menu")
            
            markup.add(scan_btn, calc_btn)
            markup.add(settings_btn)
            markup.add(menu_btn)
            
            self.bot.send_message(chat_id, text, reply_markup=markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    # –†–µ–∞–ª-—Ç–∞–π–º –æ–±—Ä–∞–±–æ—Ç–∫–∞
    async def rt_update_callback(self, updates: List[FundingUpdate]):
        """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            for update in updates:
                # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                found_index = None
                for i, existing in enumerate(self.last_opportunities):
                    if existing.symbol == update.symbol and existing.exchange == update.exchange:
                        found_index = i
                        break
                
                if found_index is not None:
                    self.last_opportunities[found_index] = update
                else:
                    self.last_opportunities.append(update)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            self.last_opportunities.sort(key=lambda x: x.apr, reverse=True)
            self.last_opportunities = self.last_opportunities[:20]
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.db.save_funding_updates(updates)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            await self.send_user_alerts(updates)
            
            logger.info(f"üì¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(updates)} —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    
    async def send_user_alerts(self, updates: List[FundingUpdate]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT user_id, min_apr, timezone FROM users 
                    WHERE auto_alerts = 1 AND notifications = 1
                ''')
                users = cursor.fetchall()
            
            for user in users:
                user_id = user['user_id']
                min_apr = user['min_apr']
                user_tz = pytz.timezone(user['timezone'])
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ –ø–æ—Ä–æ–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_alerts = [upd for upd in updates if upd.apr >= min_apr]
                
                if user_alerts:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
                    alert_text = MessageFormatter.format_alert_message(
                        user_alerts[:3], user_tz
                    )
                    
                    try:
                        self.bot.send_message(user_id, alert_text, parse_mode='Markdown')
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –≤ –ë–î
                        for alert in user_alerts[:3]:
                            self.db.save_alert(
                                user_id, alert.symbol, alert.funding_rate,
                                alert.apr, alert.exchange, 'realtime_alert'
                            )
                        
                        logger.info(f"üì¨ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {e}")
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
            schedule.every(6).hours.do(self.scheduled_cleanup)
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            schedule.every().hour.do(self.update_system_metrics)
            
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            schedule.every().day.at("03:00").do(self.backup_database)
            
            logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.scheduler_active = True
            
            def run_scheduler():
                while self.scheduler_active:
                    schedule.run_pending()
                    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
            self.scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
            self.scheduler_thread.start()
            
            logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def scheduled_cleanup(self):
        """–ü–ª–∞–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.db.cleanup_old_data()
            logger.info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–ª–∞–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def update_system_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            current_time = datetime.now(self.kiev_tz)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            if self.rt_monitor:
                stats = self.rt_monitor.get_stats()
                self.db.save_system_metric('rt_active_connections', stats.get('active_connections', 0))
                self.db.save_system_metric('rt_total_updates', stats.get('total_updates', 0))
                self.db.save_system_metric('rt_alerts_sent', stats.get('alerts_sent', 0))
            
            logger.info("üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    def backup_database(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import shutil
            import os
            
            source_db = self.db.db_path
            backup_name = f"backup_{datetime.now(self.kiev_tz).strftime('%Y%m%d_%H%M%S')}.db"
            backup_path = os.path.join("backups", backup_name)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
            os.makedirs("backups", exist_ok=True)
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
            shutil.copy2(source_db, backup_path)
            
            logger.info(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ë–î: {backup_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    async def start_realtime_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            if not self.monitoring_active:
                logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                
                self.rt_monitor = create_real_time_monitor(self.rt_update_callback)
                self.rt_monitor_task = asyncio.create_task(self.rt_monitor.start_monitoring())
                self.monitoring_active = True
                
                logger.info("‚úÖ –†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def stop_realtime_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            if self.monitoring_active:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                
                self.monitoring_active = False
                
                if self.rt_monitor:
                    await self.rt_monitor.stop_monitoring()
                
                if self.rt_monitor_task:
                    self.rt_monitor_task.cancel()
                
                logger.info("‚úÖ –†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥-–±–æ—Ç–∞ v3.0")
            
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.start_scheduler()
            
            # –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def start_rt_monitoring():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.start_realtime_monitoring())
                loop.run_forever()
            
            rt_thread = threading.Thread(target=start_rt_monitoring, daemon=True)
            rt_thread.start()
            
            logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
            self.bot.infinity_polling(
                timeout=10,
                long_polling_timeout=5,
                logger_level=logging.INFO,
                allowed_updates=['message', 'callback_query', 'location']
            )
            
        except KeyboardInterrupt:
            logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            self.cleanup()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.scheduler_active = False
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ executor
            self.executor.shutdown(wait=True)
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if self.monitoring_active:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.stop_realtime_monitoring())
                loop.close()
            
            logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    token = bot_config.telegram_token
    if token == "YOUR_TELEGRAM_BOT_TOKEN":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
        print("üí° –ò–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ config.py")
        return 1
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = EnhancedFundingBot(token)
        bot.run()
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
